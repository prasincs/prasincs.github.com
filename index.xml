<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NextDoorHacker</title>
    <link>http://nextdoorhacker.com/index.xml</link>
    <description>Recent content on NextDoorHacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 May 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://nextdoorhacker.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting sorted list of images from Amazon ECR</title>
      <link>http://nextdoorhacker.com/2016/05/09/getting-sorted-list-of-images-from-amazon-ecr/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2016/05/09/getting-sorted-list-of-images-from-amazon-ecr/</guid>
      <description>&lt;p&gt;I recently switched from using own hosted Docker Registry to the amazon hosted &lt;a href=&#34;https://aws.amazon.com/ecr/&#34;&gt;Elastic Container Registry&lt;/a&gt; and found that the UI, well, sucks. The results aren&amp;rsquo;t returned in any kind of sorted order and the UI doesn&amp;rsquo;t help you do that. In addition, it&amp;rsquo;s the same issue with the cli tool. I wish they included a timestamp field to know when the layer/image was created but in absence of that, the image tag are the best we have to go with.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package aws

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;sort&amp;quot;
	&amp;quot;strings&amp;quot;

	&amp;quot;github.com/aws/aws-sdk-go/aws&amp;quot;
	&amp;quot;github.com/aws/aws-sdk-go/aws/session&amp;quot;
	&amp;quot;github.com/aws/aws-sdk-go/service/ecr&amp;quot;
)

type SortImageIds []*ecr.ImageIdentifier

func (c SortImageIds) Len() int      { return len(c) }
func (c SortImageIds) Swap(i, j int) { c[i], c[j] = c[j], c[i] }
func (c SortImageIds) Less(i, j int) bool {

	//fmt.Println(*c[i].ImageTag, *c[j].ImageTag)
	if c[i].ImageTag == nil {
		return true
	}
	if c[j].ImageTag == nil {
		return false
	}
	return strings.Compare(*c[i].ImageTag, *c[j].ImageTag) == -1
}

func GetSortedImageIds(region string, registryId string, repositoryName string) []*ecr.ImageIdentifier {

	ecrSvc := ecr.New(session.New(), &amp;amp;aws.Config{Region: aws.String(region)})

	done := false
	var imageIds []*ecr.ImageIdentifier
	params := &amp;amp;ecr.ListImagesInput{
		RepositoryName: aws.String(repositoryName),
		MaxResults:     aws.Int64(100),
		RegistryId:     aws.String(registryId),
	}
	for !done {
		resp, err := ecrSvc.ListImages(params)

		if err != nil {
			// Print the error, cast err to awserr.Error to get the Code and
			// Message from an error.
			fmt.Println(err.Error())
			return nil
		}

		//fmt.Println(resp)
		for _, imageID := range resp.ImageIds {
			imageIds = append(imageIds, imageID)
		}
		if resp.NextToken == nil {
			done = true
		} else {
			params.NextToken = resp.NextToken
		}
	}
	sort.Sort(SortImageIds(imageIds))

	return imageIds

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very simple implementation &amp;ndash; some details have been removed. You&amp;rsquo;re expected to have your AWS environment variables already setup. If the CLI tool is working for you, you should be fine.&lt;/p&gt;

&lt;p&gt;Now you can call this function using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;imageIds := awsapi.GetSortedImageIds(&amp;quot;us-east-1&amp;quot;, &amp;quot;&amp;lt;account Id&amp;gt;&amp;quot;, &amp;quot;&amp;lt;repo name&amp;gt;&amp;quot;)
fmt.Println(imageIds)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and get a lexically sorted list by ImageTag.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proxy Aware Http Client in Go</title>
      <link>http://nextdoorhacker.com/2016/05/08/proxy-aware-http-client-in-go/</link>
      <pubDate>Sun, 08 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2016/05/08/proxy-aware-http-client-in-go/</guid>
      <description>&lt;p&gt;I keep running into situations where I find myself at a cafe or something where I&amp;rsquo;d rather not send all my traffic through work VPN. So alternatively, I use a SOCKS5 proxy for that. That works well for browsing, etc but what about applications I&amp;rsquo;m developing as well. Thankfully Go has a library that makes proxy aware http Clients really easy to write.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not executable, but I uploaded my example on Go Playground. &lt;a href=&#34;https://play.golang.org/p/NWfG9b5GIN&#34;&gt;https://play.golang.org/p/NWfG9b5GIN&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io/ioutil&amp;quot;
	&amp;quot;net/http&amp;quot;
	&amp;quot;net/url&amp;quot;
	&amp;quot;os&amp;quot;

	&amp;quot;golang.org/x/net/proxy&amp;quot;
)

func ProxyAwareHttpClient() *http.Client {
	// sane default
	var dialer proxy.Dialer
	// eh, I want the type to be proxy.Dialer but assigning proxy.Direct makes the type proxy.direct
	dialer = proxy.Direct
	proxyServer, isSet := os.LookupEnv(&amp;quot;HTTP_PROXY&amp;quot;)
	if isSet {
		proxyUrl, err := url.Parse(proxyServer)
		if err != nil {
			fmt.Fprintf(os.Stderr, &amp;quot;Invalid proxy url %q\n&amp;quot;, proxyUrl)
		}
		dialer, err = proxy.FromURL(proxyUrl, proxy.Direct)
	}

	// setup a http client
	httpTransport := &amp;amp;http.Transport{}
	httpClient := &amp;amp;http.Client{Transport: httpTransport}
	httpTransport.Dial = dialer.Dial
	return httpClient
}

func main() {
	req, err := http.NewRequest(&amp;quot;GET&amp;quot;, &amp;quot;http://google.com&amp;quot;, nil)
	if err != nil {
		panic(err)
	}

	client := ProxyAwareHttpClient()
	res, err := client.Do(req)
	if err != nil {
		panic(err)
	}
	defer res.Body.Close()
	contents, err := ioutil.ReadAll(res.Body)
	if err != nil {
		panic(err)
	}
	fmt.Println(string(contents))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Try this:&lt;/p&gt;

&lt;p&gt;First just run &lt;code&gt;go run main.go&lt;/code&gt; which should query Google.com and get you the output.&lt;/p&gt;

&lt;p&gt;Then open a socks proxy to your favorite server using &lt;code&gt;ssh -D 8081 &amp;lt;server&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HTTP_PROXY=socks5://localhost:8081 go run main.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nice thing here is that this solution works for other types of proxies too. I have tried http and https. I do understand the convention is to use the lowercase &lt;code&gt;http_proxy&lt;/code&gt; which is fairly easy to change too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mesos Development Environment Installation and setup</title>
      <link>http://nextdoorhacker.com/2015/04/30/mesos-development-environment-installation-and-setup/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2015/04/30/mesos-development-environment-installation-and-setup/</guid>
      <description>

&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&#34;text-table-of-contents&#34;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1&#34;&gt;1. Mesos Development Environment Installation and setup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-1&#34;&gt;1.1. Questions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-1-1&#34;&gt;1.1.1. Why do you want to run Mesos?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-1-2&#34;&gt;1.1.2. What Frameworks are you going to run on Mesos?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-2&#34;&gt;1.2. Background Readings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-3&#34;&gt;1.3. Pre-requisites (Development Environment)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-3-1&#34;&gt;1.3.1. Zookeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-3-2&#34;&gt;1.3.2. Mesos Masters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-3-3&#34;&gt;1.3.3. Mesos Slaves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sec-1-3-4&#34;&gt;1.3.4. Testing this Cluster with Spark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I realized recently that I have a somewhat non-standard setup for
running/testing Mesos on my OSX system. Initially, I started this to see how well Mesos
compiles on OSX, but given that this setup has worked fine for me, I&amp;rsquo;ve been running it.
For a more accurate benchmark, I recommend running in VMs or some cloud provider.&lt;/p&gt;

&lt;h2 id=&#34;questions-a-id-sec-1-1-name-sec-1-1-a&#34;&gt;Questions&lt;a id=&#34;sec-1-1&#34; name=&#34;sec-1-1&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is a guide to getting started with setting up mesos on your local system
and soon, on a Cluster. First of all, you need to ask a few questions to
yourself.&lt;/p&gt;

&lt;h3 id=&#34;why-do-you-want-to-run-mesos-a-id-sec-1-1-1-name-sec-1-1-1-a&#34;&gt;Why do you want to run Mesos?&lt;a id=&#34;sec-1-1-1&#34; name=&#34;sec-1-1-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Is it going to reduce any complexity that you are encountering, or introducing
more. Remember, making things more distributed without monitoring just adds more
things that can fail. That&amp;rsquo;s not a reason to avoid building distributed systems,
but a good reason to look at monitoring and maintenance from the beginning.&lt;/p&gt;

&lt;h3 id=&#34;what-frameworks-are-you-going-to-run-on-mesos-a-id-sec-1-1-2-name-sec-1-1-2-a&#34;&gt;What Frameworks are you going to run on Mesos?&lt;a id=&#34;sec-1-1-2&#34; name=&#34;sec-1-1-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;There are various great frameworks that exist for mesos at the time of this
writing (January 28, 2015). It&amp;rsquo;s not terribly hard to write one either &amp;#x2013; if
you want a Clojure example, check out
&lt;a href=&#34;https://github.com/edpaget/riak-mesos&#34;&gt;https://github.com/edpaget/riak-mesos&lt;/a&gt;. There are better examples in Clojure
and Go. There are various meta-frameworks like Marathon and Aurora too. Kubernetes is gaining
a lot of popularity too now. I haven&amp;rsquo;t run it on top of mesos yet, so I&amp;rsquo;m not sure how well it works.&lt;/p&gt;

&lt;h2 id=&#34;background-readings-a-id-sec-1-2-name-sec-1-2-a&#34;&gt;Background Readings&lt;a id=&#34;sec-1-2&#34; name=&#34;sec-1-2&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;These aren&amp;rsquo;t required but I highly recommend checking them out.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Original Mesos Paper (&lt;a href=&#34;http://people.csail.mit.edu/matei/papers/2011/nsdi_mesos.pdf&#34;&gt;http://people.csail.mit.edu/matei/papers/2011/nsdi_mesos.pdf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Omega Paper (&lt;a href=&#34;http://research.google.com/pubs/pub41684.html&#34;&gt;http://research.google.com/pubs/pub41684.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;YARN vs Mesos (&lt;a href=&#34;http://www.quora.com/How-does-YARN-compare-to-Mesos&#34;&gt;http://www.quora.com/How-does-YARN-compare-to-Mesos&lt;/a&gt; and &lt;a href=&#34;http://blog.typeobject.com/a-quick-comparison-of-mesos-and-yarn&#34;&gt;http://blog.typeobject.com/a-quick-comparison-of-mesos-and-yarn&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Borg Paper (&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/43438.pdf&#34;&gt;http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/43438.pdf&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are somewhat outdated at this point as the current mesos code also has
input from Wilkes and gang &amp;#x2013; so it&amp;rsquo;s closer to Mesos-Omega.&lt;/p&gt;

&lt;p&gt;On the &amp;ldquo;might be too bleeding-edge-for-production&amp;rdquo; category.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Quasar from Stanford (&lt;a href=&#34;http://www.industry-academia.org/download/2014-asplos-quasar-Stanford-paper.pdf&#34;&gt;http://www.industry-academia.org/download/2014-asplos-quasar-Stanford-paper.pdf&lt;/a&gt;) focuses on assigning resource allocation based on constraints for processes to get the best QoS. Mesos Frameworks like Aurora are moving towards this too.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pre-requisites-development-environment-a-id-sec-1-3-name-sec-1-3-a&#34;&gt;Pre-requisites (Development Environment)&lt;a id=&#34;sec-1-3&#34; name=&#34;sec-1-3&#34;&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&#34;zookeeper-a-id-sec-1-3-1-name-sec-1-3-1-a&#34;&gt;Zookeeper&lt;a id=&#34;sec-1-3-1&#34; name=&#34;sec-1-3-1&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You can run this as a single instance for development but given that mesos
depends on Zookeeper cluster to provide source of truth, you want to run these
as a cluster. Ideally 3 or 5 nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://apache.cs.utah.edu/zookeeper/stable/zookeeper-3.4.6.tar.gz tar
-xzvf zookeeper-3.4.6.tar.gz cd zookeeper-3.4.6
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Generate Zookeeper configuration&lt;/p&gt;

&lt;p&gt;You can manually try to do this but it&amp;rsquo;s can be annoying if you&amp;rsquo;re trying it for
testing the servers. I use this project for doing
that. &lt;a href=&#34;https://github.com/phunt/zkconf&#34;&gt;https://github.com/phunt/zkconf&lt;/a&gt;, it&amp;rsquo;s kind of complicated &amp;#x2013; so I&amp;rsquo;ll
supply the relevant configuration files generated here.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install cheetah cheetah compile *.tmpl python zkconf.py --count 3
~/work/mesos/zookeeper-3.4.6/conf/standalone-confs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will add some files in the given directory that will start the cluster for
you. The default zookeeper connection string is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;localhost:2181,localhost:2182,localhost:2183
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep note of this &amp;#x2013; this will be useful later for Mesos configuration.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Aside: Using Zookeeper from Clojure&lt;/p&gt;

&lt;p&gt;The best way to use Zookeeper from Clojure is to use the curator framework &amp;#x2013; I
have used the curator library for Clojure which is a wrapper around Apache
Curator library. &lt;a href=&#34;https://github.com/pingles/curator&#34;&gt;https://github.com/pingles/curator&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;mesos-masters-a-id-sec-1-3-2-name-sec-1-3-2-a&#34;&gt;Mesos Masters&lt;a id=&#34;sec-1-3-2&#34; name=&#34;sec-1-3-2&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now, lets get Mesos. I&amp;rsquo;m assuming a fresh OSX installation &amp;#x2013; (10.10 with
Homebrew).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://archive.apache.org/dist/mesos/0.21.0/mesos-0.21.0.tar.gz tar -zxvf
mesos-0.21.0.tar.gz cd mesos-0.21.0 ./configure make export
MESOS_HOME=/Users/pgautam/work/mesos/mesos-0.21.0 mkdir -p
work-dir/{5050,5051,5052} mkdir -p log-dir/{5050,5051,5052}
./bin/mesos-master.sh --zk=zk://localhost:2181,localhost:2182,localhost:2183/mesos  --work_dir=$PWD/work-dir/5050 --quorum=2 --port=5050 --log_dir=$PWD/log-dir/5050
./bin/mesos-master.sh --zk=zk://localhost:2181,localhost:2182,localhost:2183/mesos --work_dir=$PWD/work-dir/5051 --quorum=2 --port=5051 --log_dir=$PWD/log-dir/5051
./bin/mesos-master.sh --zk=zk://localhost:2181,localhost:2182,localhost:2183/mesos --work_dir=$PWD/work-dir/5052 --quorum=2 --port=5052 --log_dir=$PWD/log-dir/5052
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://mesos.apache.org/documentation/latest/configuration/&#34;&gt;http://mesos.apache.org/documentation/latest/configuration/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-configure-a-production-ready-mesosphere-cluster-on-ubuntu-14-04&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-configure-a-production-ready-mesosphere-cluster-on-ubuntu-14-04&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mesos-slaves-a-id-sec-1-3-3-name-sec-1-3-3-a&#34;&gt;Mesos Slaves&lt;a id=&#34;sec-1-3-3&#34; name=&#34;sec-1-3-3&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;We are only going to run one mesos slave this time because they&amp;rsquo;re determined by
IP address to run on local system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd mesos-0.21.0 ./bin/mesos-slave.sh --port=5053 --master=zk://localhost:2181,localhost:2182,localhost:2183/mesos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you only have one slave with this method. Without slaves, there&amp;rsquo;s no
&amp;ldquo;worker&amp;rdquo; to run the tasks on but it demonstrates the key concepts well.&lt;/p&gt;

&lt;h3 id=&#34;testing-this-cluster-with-spark-a-id-sec-1-3-4-name-sec-1-3-4-a&#34;&gt;Testing this Cluster with Spark&lt;a id=&#34;sec-1-3-4&#34; name=&#34;sec-1-3-4&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now, you want to download Spark from &lt;a href=&#34;http://spark.apache.org/downloads.html&#34;&gt;http://spark.apache.org/downloads.html&lt;/a&gt; &amp;#x2013;
Get the direct link.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://d3kbcqa49mib13.cloudfront.net/spark-1.2.0.tgz
tar -xzvf spark-1.2.0.tgz
cd spark-1.2.0
./make-distribution.sh --tgz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make a file &amp;ldquo;spark-1.2.0-bin-1.0.4.tgz&amp;rdquo;, You can place this in HDFS
share, NFS mount, S3 or HTTP service and access it using &lt;code&gt;SPARK_EXECUTOR_URI&lt;/code&gt;.
If it&amp;rsquo;s your own cluster that runs Spark jobs often, you&amp;rsquo;re better off just setting
&lt;code&gt;SPARK_HOME&lt;/code&gt; in the same place on every node, in an NFS mount or similar.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Running Spark&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m assuming OSX here, for Linux it would be libmesos.so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export MESOS_NATIVE_LIBRARY=$HOME/work/mesos/mesos-0.21.0/src/.libs/libmesos.dylib
export SPARK_HOME=$HOME/work/mesos/spark-1.2.0
export SPARK_MASTER_WEBUI_PORT=4040
SPARK_MASTER_IP=10.1.10.47 SPARK_LOCAL_IP=127.0.0.1 ./bin/spark-shell --master mesos://zk://localhost:2181,localhost:2182,localhost:2183/mesos
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;SPARK_MASTER_IP&lt;/code&gt; and &lt;code&gt;SPARK_LOCAL_IP&lt;/code&gt; are just declared so that they&amp;rsquo;re
explicitly detected and it&amp;rsquo;s not all in loopback. This will also run a web UI on port 4040.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;15/02/02 15:02:51 INFO SparkILoop: Created spark context..
Spark context available as sc.

scala&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the training files from
&lt;a href=&#34;http://ampcamp.berkeley.edu/5/exercises/getting-started.html&#34;&gt;http://ampcamp.berkeley.edu/5/exercises/getting-started.html&lt;/a&gt; and place them
somewhere. I have them inside the &amp;ldquo;mesos&amp;rdquo; directory.  Lets try running the
sample program.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scala&amp;gt; val pagecounts = sc.textFile(&amp;quot;../spark-training/data/pagecounts&amp;quot;)
15/02/02 15:02:55 INFO MemoryStore: ensureFreeSpace(32768) called with curMem=0, maxMem=278302556
15/02/02 15:02:55 INFO MemoryStore: Block broadcast_0 stored as values in memory (estimated size 32.0 KB, free 265.4 MB)
15/02/02 15:02:55 INFO MemoryStore: ensureFreeSpace(4959) called with curMem=32768, maxMem=278302556
15/02/02 15:02:55 INFO MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 4.8 KB, free 265.4 MB)
15/02/02 15:02:55 INFO BlockManagerInfo: Added broadcast_0_piece0 in memory on localhost:52212 (size: 4.8 KB, free: 265.4 MB)
15/02/02 15:02:55 INFO BlockManagerMaster: Updated info of block broadcast_0_piece0
15/02/02 15:02:55 INFO SparkContext: Created broadcast 0 from textFile at &amp;lt;console&amp;gt;:12
pagecounts: org.apache.spark.rdd.RDD[String] = ../spark-training/data/pagecounts MappedRDD[1] at textFile at &amp;lt;console&amp;gt;:12

scala&amp;gt; pagecounts.take(10).foreach(println)
15/02/02 15:05:13 INFO SparkContext: Starting job: take at &amp;lt;console&amp;gt;:15
15/02/02 15:05:13 INFO DAGScheduler: Got job 5 (take at &amp;lt;console&amp;gt;:15) with 1 output partitions (allowLocal=true)
15/02/02 15:05:13 INFO DAGScheduler: Final stage: Stage 5(take at &amp;lt;console&amp;gt;:15)
15/02/02 15:05:13 INFO DAGScheduler: Parents of final stage: List()
15/02/02 15:05:13 INFO DAGScheduler: Missing parents: List()
15/02/02 15:05:13 INFO DAGScheduler: Submitting Stage 5 (../spark-training/data/pagecounts MappedRDD[1] at textFile at &amp;lt;console&amp;gt;:12), which has no missing parents
15/02/02 15:05:13 INFO MemoryStore: ensureFreeSpace(2560) called with curMem=60037, maxMem=278302556
15/02/02 15:05:13 INFO MemoryStore: Block broadcast_6 stored as values in memory (estimated size 2.5 KB, free 265.4 MB)
15/02/02 15:05:13 INFO MemoryStore: ensureFreeSpace(1902) called with curMem=62597, maxMem=278302556
15/02/02 15:05:13 INFO MemoryStore: Block broadcast_6_piece0 stored as bytes in memory (estimated size 1902.0 B, free 265.3 MB)
15/02/02 15:05:13 INFO BlockManagerInfo: Added broadcast_6_piece0 in memory on localhost:52212 (size: 1902.0 B, free: 265.4 MB)
15/02/02 15:05:13 INFO BlockManagerMaster: Updated info of block broadcast_6_piece0
15/02/02 15:05:13 INFO SparkContext: Created broadcast 6 from broadcast at DAGScheduler.scala:838
15/02/02 15:05:13 INFO DAGScheduler: Submitting 1 missing tasks from Stage 5 (../spark-training/data/pagecounts MappedRDD[1] at textFile at &amp;lt;console&amp;gt;:12)
15/02/02 15:05:13 INFO TaskSchedulerImpl: Adding task set 5.0 with 1 tasks
15/02/02 15:05:13 INFO TaskSetManager: Starting task 0.0 in stage 5.0 (TID 5, 10.1.10.47, PROCESS_LOCAL, 1337 bytes)
15/02/02 15:05:13 INFO BlockManagerInfo: Added broadcast_6_piece0 in memory on 10.1.10.47:52221 (size: 1902.0 B, free: 265.4 MB)
15/02/02 15:05:13 INFO TaskSetManager: Finished task 0.0 in stage 5.0 (TID 5) in 32 ms on 10.1.10.47 (1/1)
15/02/02 15:05:13 INFO DAGScheduler: Stage 5 (take at &amp;lt;console&amp;gt;:15) finished in 0.034 s
15/02/02 15:05:13 INFO TaskSchedulerImpl: Removed TaskSet 5.0, whose tasks have all completed, from pool
15/02/02 15:05:13 INFO DAGScheduler: Job 5 finished: take at &amp;lt;console&amp;gt;:15, took 0.040613 s
20090505-000000 aa Main_Page 2 9980
20090505-000000 ab %D0%90%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82 1 465
20090505-000000 ab %D0%98%D1%85%D0%B0%D0%B4%D0%BE%D1%83_%D0%B0%D0%B4%D0%B0%D2%9F%D1%8C%D0%B0 1 16086
20090505-000000 af.b Tuisblad 1 36236
20090505-000000 af.d Tuisblad 4 189738
20090505-000000 af.q Tuisblad 2 56143
20090505-000000 af Afrika 1 46833
20090505-000000 af Afrikaans 2 53577
20090505-000000 af Australi%C3%AB 1 132432
20090505-000000 af Barack_Obama 1 23368
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now have a distributed Spark instance now!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Importing Open Data Files to JOSM</title>
      <link>http://nextdoorhacker.com/2015/04/27/importing-open-data-files-to-josm/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2015/04/27/importing-open-data-files-to-josm/</guid>
      <description>

&lt;p&gt;Following on my previous post on &lt;a href=&#34;http://nextdoorhacker.com/2015/04/26/getting-started-with-open-streetmap-for-nepal&#34;&gt;Getting Starting with Open StreetMap for Nepal&lt;/a&gt;, I wanted to look at the open datasets and GIS shapefiles that people have been sharing. Given the lack of additional data and poor satellite image resolution, being able to delineate Village Development Committee (VDC) would be great help, in my opinion. Here&amp;rsquo;s how to setup the &lt;a href=&#34;http://josm.openstreetmap.de&#34;&gt;JOSM&lt;/a&gt; tool to do so. We&amp;rsquo;ll get the data from &lt;a href=&#34;https://data.hdx.rwlabs.org/nepal-earthquake&#34;&gt;HDX Data repository&lt;/a&gt; in the form of zip files to open in JOSM.&lt;/p&gt;

&lt;p&gt;My base system is Mac OSX &amp;ndash; Linux and Windows are somewhat similar (all you need to know is &lt;em&gt;Preferences&lt;/em&gt; are under the Program Name menu in OSX and under Edit in Linux and Windows).&lt;/p&gt;

&lt;h1 id=&#34;download-josm&#34;&gt;Download JOSM&lt;/h1&gt;

&lt;p&gt;Get the relevant version from &lt;a href=&#34;http://josm.openstreetmap.de/&#34;&gt;http://josm.openstreetmap.de/&lt;/a&gt;, I think the jar file is good enough on all OSes.&lt;/p&gt;

&lt;h1 id=&#34;run-the-program&#34;&gt;Run the program&lt;/h1&gt;

&lt;p&gt;If you&amp;rsquo;re okay with commandline, run &lt;code&gt;java -jar josm-tested.jar&lt;/code&gt; or just click on the jar file or application.&lt;/p&gt;

&lt;h2 id=&#34;setup-remote-control&#34;&gt;Setup Remote Control&lt;/h2&gt;

&lt;p&gt;The way JOSM works with rest of OpenStreetMap is that it opens ports on 8111 and 8112 for external applications controlling JOSM.&lt;/p&gt;

&lt;p&gt;Go to &lt;em&gt;JOSM &amp;gt; Preferences&lt;/em&gt; and click the remote like button on the left side. It took me a while to see the tabs on the left.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-josm-remotecontrol.png&#34; alt=&#34;JOSM Remote Control&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Enable Remote Control in the screen. You&amp;rsquo;ll be asked to restart the application for the changes to take effect.&lt;/p&gt;

&lt;h2 id=&#34;open-the-browser-where-the-task-is-open-and-select-edit-with-josm&#34;&gt;Open the browser where the task is open and Select &amp;ldquo;Edit with JOSM&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-josm-browser.png&#34; alt=&#34;Edit with JOSM from Browser&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The JOSM window should open the right location with the proper layers.&lt;/p&gt;

&lt;p&gt;If the screen is all black with some lines, it means you have to pick one of the imagery services from the Imagery menu. I pick &amp;ldquo;Bing Aerial Images&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-josm-screen.png&#34; alt=&#34;JOSM initial image&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;importing-opendata-from-hdx-data-repository&#34;&gt;Importing OpenData from HDX data repository&lt;/h1&gt;

&lt;p&gt;Download the dataset from &lt;a href=&#34;https://data.hdx.rwlabs.org/dataset/nepal-admin-level-4-administrative-boundaries-cod&#34;&gt;https://data.hdx.rwlabs.org/dataset/nepal-admin-level-4-administrative-boundaries-cod&lt;/a&gt;. It will be a zip file named &lt;code&gt;npl_polbnda_adm4_vdc_25k_50k_sdn_wgs84.shp.zip&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;download-opendata-plugin&#34;&gt;Download Opendata plugin&lt;/h2&gt;

&lt;h3 id=&#34;open-preferences&#34;&gt;Open Preferences&lt;/h3&gt;

&lt;p&gt;Open Preferences and Click on &amp;ldquo;Configure available plugins&amp;hellip;&amp;rdquo; icon on the left. It&amp;rsquo;s 4th item from the top as of 2015-26 release.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-josm-plugins.png&#34; alt=&#34;JOSM Plugins&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Search for OpenData and select it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-josm-plugins-opendata.png&#34; alt=&#34;JOSM OpenData Plugin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve selected it, press ok.&lt;/p&gt;

&lt;h1 id=&#34;open-the-zip-file&#34;&gt;Open the Zip File&lt;/h1&gt;

&lt;p&gt;Go to &lt;em&gt;File &amp;gt; Open&lt;/em&gt; and navigate to the zip file &lt;code&gt;npl_polbnda_adm4_vdc_25k_50k_sdn_wgs84.shp.zip&lt;/code&gt; that you downloaded earlier. This will show up as a new layer on top of the existing map. You can enable and disable the layers from the right hand side.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-josm-hdx-layer.png&#34; alt=&#34;JOSM - New HDX Layer&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;continue-mapping&#34;&gt;Continue Mapping&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m currently using this only as a guide to avoid pushing something upstream that breaks things. You can download more datasets and shape files to guide your mapping work.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Open StreetMap for Nepal</title>
      <link>http://nextdoorhacker.com/2015/04/26/getting-started-with-open-streetmap-for-nepal/</link>
      <pubDate>Sun, 26 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2015/04/26/getting-started-with-open-streetmap-for-nepal/</guid>
      <description>

&lt;p&gt;As you must be well aware of the enormous toll the earthquake has taken for Nepal by now, there&amp;rsquo;s still work you can do to help the boots on the ground doing rescue work by helping map the affected regions. Basically, outside of major towns and cities, Nepal&amp;rsquo;s landscape is very hilly &amp;ndash; there are few if any roads to most villages. It doesn&amp;rsquo;t help in rescue efforts now that all the villages are reduced to rubbles. If there are people stranded in these remote locations, knowing where the houses, residential areas are would expedite the process for rescue efforts. You would be looking at satellite images of the region and labeling whether a particular item is a path, road, house, or anything else. It requires paying attention to roads and having a general sense of what could be accessible.&lt;/p&gt;

&lt;p&gt;Unfortunately the process is still hard to grasp for beginners, so I&amp;rsquo;m going to attempt walking through the process for a new user. There are a lot of options here, so I&amp;rsquo;m going to pick the one that&amp;rsquo;s most efficient to get started.&lt;/p&gt;

&lt;p&gt;For more detailed instructions, please check the following wiki pages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.openstreetmap.org/wiki/2015_Nepal_earthquake&#34;&gt;http://wiki.openstreetmap.org/wiki/2015_Nepal_earthquake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;create-an-account-on-openstreetmap-org&#34;&gt;Create an Account on Openstreetmap.org&lt;/h1&gt;

&lt;p&gt;You can go to &lt;a href=&#34;https://www.openstreetmap.org/user/new&#34;&gt;Sign up page&lt;/a&gt; and create one. You&amp;rsquo;ll have to validate your email address.&lt;/p&gt;

&lt;h1 id=&#34;sign-in-to-the-site-by-following-the-link&#34;&gt;Sign in to the site by following the link.&lt;/h1&gt;

&lt;p&gt;You&amp;rsquo;ll be greeted with something like the following.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-login.png&#34; alt=&#34;OSM Login Page&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;go-to-the-task-manager-and-search-for-tasks-for-nepal&#34;&gt;Go to the task manager and search for tasks for Nepal&lt;/h1&gt;

&lt;p&gt;The Humanitarian OSM Team (HOT) has a Tasking Manager that assigns tasks for you to pick and choose. It&amp;rsquo;s over at &lt;a href=&#34;http://tasks.hotosm.org/&#34;&gt;http://tasks.hotosm.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-tasking-manager.png&#34; alt=&#34;OSM Tasking Manager&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;pick-a-task&#34;&gt;Pick a Task&lt;/h1&gt;

&lt;p&gt;The main screen is laid out with left side designating instructions and right side with map and various tasks. The way it works is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Grid items are the subdivisions of work.&lt;/li&gt;
&lt;li&gt;Once you click and select &amp;ldquo;Map&amp;rdquo; you lock it for 2 hours.&lt;/li&gt;
&lt;li&gt;Please unlock the task if you are not able to continue mapping anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-tasking-select.png&#34; alt=&#34;HOT Task Selection&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;click-on-contribute-tab&#34;&gt;Click on Contribute Tab&lt;/h1&gt;

&lt;p&gt;On the left side of screen there are various tabs, &amp;ldquo;Contribute&amp;rdquo; is the one you want to pick. You can let it pick one at random for you or pick one in the map.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-tasking-contribute.png&#34; alt=&#34;HOT Task Contribute&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You need to select &amp;ldquo;Start Mapping&amp;rdquo; to lock the region.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-tasking-lock.png&#34; alt=&#34;HOT Task Lock&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;use-an-editor-to-work-on-mapping&#34;&gt;Use an editor to work on mapping.&lt;/h1&gt;

&lt;p&gt;There are various desktop options that are great if you want to merge with existing data, do some GIS work, etc. But the learning curve for them is pretty steep. You can use the online iD Editor just fine. It&amp;rsquo;s synced with the servers, so as soon as you save, it becomes accessible to others for reviewing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-tasking-edit-id.png&#34; alt=&#34;HOT Task Edit&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;open-id-editor-and-start-mapping&#34;&gt;Open iD editor and start mapping&lt;/h2&gt;

&lt;h3 id=&#34;follow-the-walkthrough&#34;&gt;Follow the walkthrough.&lt;/h3&gt;

&lt;p&gt;I think the walkthrough is done very well and is very straightforward if you have done any amount of graphics work. Even MS Paint experience is good here. :)&lt;/p&gt;

&lt;p&gt;Once you are done editing, save it so it&amp;rsquo;s accessible to others.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-id-save.png&#34; alt=&#34;OSM iD Editor Save&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;remember-to-unlock-once-you-are-done-mapping&#34;&gt;Remember to Unlock once you are done mapping&lt;/h1&gt;

&lt;p&gt;Please, do remember to save so that someone else can continue the work if you can&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/nepal/osm-tasking-unlock.png&#34; alt=&#34;OSM Task Unlock&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;more-resources&#34;&gt;More resources&lt;/h1&gt;

&lt;p&gt;This is an attempt to boil down a series of tasks, if you have any questions or confusions contact the fine folks in #hot IRC channel on oftc.net or leave a comment here and I&amp;rsquo;ll try my best to answer them. And thank you for your work. You&amp;rsquo;re awesome!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are tons more resource on &lt;a href=&#34;http://wiki.openstreetmap.org/wiki/2015_Nepal_earthquake&#34;&gt;wiki.openstreetmap.org/wiki/2015_Nepal_earthquake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Nepal_remote_mapping_guide&#34;&gt;Nepal Remote Mapping Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.openstreetmap.org/wiki/Nepal/Roads&#34;&gt;Nepal Roads Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I found out about &lt;a href=&#34;http://kathmandulivinglabs.org/resource&#34;&gt;Kathmandu Living Labs Resources&lt;/a&gt;. They have great tutorials.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: Explained the process of mapping and why we&amp;rsquo;d want to do so. Thanks &lt;a href=&#34;https://twitter.com/biswas/&#34;&gt;@biswas&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running a dev version of docker</title>
      <link>http://nextdoorhacker.com/2014/11/11/running-a-dev-version-of-docker/</link>
      <pubDate>Tue, 11 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2014/11/11/running-a-dev-version-of-docker/</guid>
      <description>

&lt;p&gt;I have recently been working on fixing some personal pain-points for Docker. It
came about because of a course I am taking at UConn this fall on
&lt;a href=&#34;http://www.engr.uconn.edu/~mok11002/public_html/cse5095_fall2014.htm&#34;&gt;Troubleshooting Distributed
Systems&lt;/a&gt; -
Excellent course by the way.&lt;/p&gt;

&lt;p&gt;The current issue I&amp;rsquo;m looking at is the one about
&lt;a href=&#34;https://github.com/docker/docker/issues/7195&#34;&gt;logging&lt;/a&gt;. Yep, I somehow managed
to volunteered to do this in a month with a full-time job and 4 hours a week of driving
back and forth from UConn. Anyway, I needed to run a dev version of Docker in my
local machine alongside the stable version. I&amp;rsquo;m on a mac running boot2docker.
There are &lt;a href=&#34;http://www.siliconfidential.com/articles/docker-coreos-osx/&#34;&gt;other
ways&lt;/a&gt; to do this
but I find boot2docker sufficient for almost all the work I&amp;rsquo;d want to do in this
case.&lt;/p&gt;

&lt;h2 id=&#34;compiling-docker&#34;&gt;Compiling Docker&lt;/h2&gt;

&lt;p&gt;Basically, follow the instruction in
&lt;a href=&#34;http://docs.docker.com/contributing/devenvironment/&#34;&gt;http://docs.docker.com/contributing/devenvironment/&lt;/a&gt;. The short form of it is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:docker/docker.git
cd docker
make BINDDIR=. cross
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker compiles itself in a docker container (of course) and it was a seamless
operation aside from the fact that I could not access the binaries after the
compilation was done. The problem is that your &lt;code&gt;BINDDIR&lt;/code&gt; is not set to the
current directory. I have come to run the make command with that environment
variable, for tasks other than tests.&lt;/p&gt;

&lt;p&gt;You will find the compiled versions in the following directory structure
 (inside the &lt;code&gt;bundles&lt;/code&gt; directory)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundles
├── 1.3.1
│   └── binary
│       ├── docker -&amp;gt; docker-1.3.1
│       ├── docker-1.3.1
│       ├── docker-1.3.1.md5
│       └── docker-1.3.1.sha256
└── 1.3.1-dev
    ├── binary
    │   ├── docker -&amp;gt; docker-1.3.1-dev
    │   ├── docker-1.3.1-dev
    │   ├── docker-1.3.1-dev.md5
    │   └── docker-1.3.1-dev.sha256
    └── cross
        ├── darwin
        │   ├── 386
        │   │   ├── docker -&amp;gt; docker-1.3.1-dev
        │   │   ├── docker-1.3.1-dev
        │   │   ├── docker-1.3.1-dev.md5
        │   │   └── docker-1.3.1-dev.sha256
        │   └── amd64
        │       ├── docker -&amp;gt; docker-1.3.1-dev
        │       ├── docker-1.3.1-dev
        │       ├── docker-1.3.1-dev.md5
        │       └── docker-1.3.1-dev.sha256
        ├── freebsd
        │   ├── 386
        │   │   ├── docker -&amp;gt; docker-1.3.1-dev
        │   │   ├── docker-1.3.1-dev
        │   │   ├── docker-1.3.1-dev.md5
        │   │   └── docker-1.3.1-dev.sha256
        │   ├── amd64
        │   │   ├── docker -&amp;gt; docker-1.3.1-dev
        │   │   ├── docker-1.3.1-dev
        │   │   ├── docker-1.3.1-dev.md5
        │   │   └── docker-1.3.1-dev.sha256
        │   └── arm
        │       ├── docker -&amp;gt; docker-1.3.1-dev
        │       ├── docker-1.3.1-dev
        │       ├── docker-1.3.1-dev.md5
        │       └── docker-1.3.1-dev.sha256
        └── linux
            ├── 386
            │   ├── docker -&amp;gt; docker-1.3.1-dev
            │   ├── docker-1.3.1-dev
            │   ├── docker-1.3.1-dev.md5
            │   └── docker-1.3.1-dev.sha256
            ├── amd64
            │   ├── docker -&amp;gt; ../../../binary/docker
            │   ├── docker-1.3.1-dev -&amp;gt; ../../../binary/docker-1.3.1-dev
            │   ├── docker-1.3.1-dev.md5 -&amp;gt; ../../../binary/docker-1.3.1-dev.md5
            │   └── docker-1.3.1-dev.sha256 -&amp;gt; ../../../binary/docker-1.3.1-dev.sha256
            └── arm
                ├── docker -&amp;gt; docker-1.3.1-dev
                ├── docker-1.3.1-dev
                ├── docker-1.3.1-dev.md5
                └── docker-1.3.1-dev.sha256
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I&amp;rsquo;m using a Macbook Pro - when I try to run &lt;code&gt;./bundles/1.3.1-dev/cross/darwin/amd64/docker ps&lt;/code&gt; I get&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2014/11/11 04:17:49 Error response from daemon: client and server don&#39;t have same version (client : 1.16, server: 1.15)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means the versions of client and servers do not match. Now I don&amp;rsquo;t really want to replace the stable docker instance running in &lt;code&gt;boot2docker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The solution is slightly hacky but works well enough for what I need.&lt;/p&gt;

&lt;h1 id=&#34;move-docker-binary-to-the-vm&#34;&gt;Move Docker binary to the VM&lt;/h1&gt;

&lt;p&gt;This would be similar for other systems too - I&amp;rsquo;m going to assume &lt;code&gt;boot2docker&lt;/code&gt; for simplicity again&lt;/p&gt;

&lt;h2 id=&#34;find-boot2docker-ssh-port&#34;&gt;Find boot2docker ssh port&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s mostly &lt;code&gt;2022&lt;/code&gt; but doesn&amp;rsquo;t hurt to look&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ boot2docker info

{
  &amp;quot;Name&amp;quot;: &amp;quot;boot2docker-vm&amp;quot;,
  &amp;quot;UUID&amp;quot;: &amp;quot;c0bad522-2c24-4a96-bf54-d2c0225be3a2&amp;quot;,
  &amp;quot;Iso&amp;quot;: &amp;quot;/Users/nextdooerhacker/.boot2docker/boot2docker.iso&amp;quot;,
  &amp;quot;State&amp;quot;: &amp;quot;running&amp;quot;,
  &amp;quot;CPUs&amp;quot;: 8,
  &amp;quot;Memory&amp;quot;: 2048,
  &amp;quot;VRAM&amp;quot;: 8,
  &amp;quot;CfgFile&amp;quot;: &amp;quot;/Users/nextdoorhacker/VirtualBox VMs/boot2docker-vm/boot2docker-vm.vbox&amp;quot;,
  &amp;quot;BaseFolder&amp;quot;: &amp;quot;/Users/nextdoorhacker/VirtualBox VMs/boot2docker-vm&amp;quot;,
  &amp;quot;OSType&amp;quot;: &amp;quot;&amp;quot;,
  &amp;quot;Flag&amp;quot;: 0,
  &amp;quot;BootOrder&amp;quot;: null,
  &amp;quot;DockerPort&amp;quot;: 0,
  &amp;quot;SSHPort&amp;quot;: 2022,
  &amp;quot;SerialFile&amp;quot;: &amp;quot;/Users/nextdoorhacker/.boot2docker/boot2docker-vm.sock&amp;quot;
}%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to script it, I recommend the excellent jq tool to get the number.
There are ways to do this with awk/sed/grep tools too.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bot2docker info | jq &#39;.SSHPort&#39;
2022
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets save that to a variable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PORT=$(boot2docker info | jq &#39;.SSHPort&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;move-the-binaries-to-boot2docker&#34;&gt;Move the binaries to boot2docker&lt;/h2&gt;

&lt;p&gt;From your docker directory, the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp -r -P $PORT bundles/1.3.1-dev/cross/linux/amd64/ docker@localhost:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The password according to &lt;a href=&#34;https://github.com/boot2docker/boot2docker&#34;&gt;https://github.com/boot2docker/boot2docker&lt;/a&gt; is
&lt;code&gt;tcuser&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ssh-into-boot2docker&#34;&gt;SSH into boot2docker&lt;/h2&gt;

&lt;p&gt;This should drop you into the boot2docker shell&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;boot2docker ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-the-dev-docker-instance&#34;&gt;Run the dev docker instance&lt;/h2&gt;

&lt;p&gt;I picked the port &lt;code&gt;2378&lt;/code&gt; pretty much arbitrarily here. I wanted to run with
just changing the &lt;code&gt;DOCKER_HOST&lt;/code&gt; variable. Unless I&amp;rsquo;m hacking on the TLS part, I
shouldn&amp;rsquo;t have to change that.  This is the command I run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd amd64
sudo ./docker -d -D -g . -H unix:// -H tcp://0.0.0.0:2378 --tlsverify --tlscacert=/var/lib/boot2docker/tls/ca.pem --tlscert=/var/lib/boot2docker/tls/server.pem --tlskey=/var/lib/boot2docker/tls/serverkey.pem -p docker.pid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only things that have changed are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;-D&lt;/code&gt; argument for debug mode - I find it useful to have it running. Docker is not that verbose to bother me&lt;/li&gt;
&lt;li&gt;the pidfile to be in the current directory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;using-the-new-client&#34;&gt;Using the new client&lt;/h2&gt;

&lt;p&gt;Now prefix with the new port number &amp;ndash; everything else will remain the same.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DOCKER_HOST=tcp://192.168.59.103:2378 ./bundles/1.3.1-dev/cross/darwin/amd64/docker run -t -i ubuntu  /bin/bash
root@c886080a6024:/#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congrats you have a dev version of docker running. Commence hackery!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Pandoc process</title>
      <link>http://nextdoorhacker.com/2014/09/16/simple-pandoc-process/</link>
      <pubDate>Tue, 16 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2014/09/16/simple-pandoc-process/</guid>
      <description>

&lt;p&gt;So, I recently signed up for a Distributed Systems course at UConn (&lt;a href=&#34;http://www.engr.uconn.edu/~mok11002/public_html/cse5095_fall2014.htm&#34;&gt;http://www.engr.uconn.edu/~mok11002/public_html/cse5095_fall2014.htm&lt;/a&gt;). It involves a lot of reading and writing reviews. I have always written these class assignments in LaTeX except when I have been expressedly forbidden from using it. However, there&amp;rsquo;s a whole gamut of problems with writing in LaTeX directly. Partly, you may not always be in a place where your environment is sane. So, being able to store as plaintext/markdown would be awesome. Here&amp;rsquo;s what I do for the reviews:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Every file named after the day it is due &amp;ndash; so I don&amp;rsquo;t have to remember the name of the paper or some other arbitrary thing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Pandoc runs and generates PDF&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, a file for a project due on Sept 9th may look like this &lt;code&gt;sept_9.md&lt;/code&gt; and upon run the pandoc command &lt;code&gt;pandoc -V geometry=&#39;margin=1in&#39; -f markdown -o sept_9.pdf sept_9.md &amp;amp;&amp;amp; open sept_9.pdf&lt;/code&gt; your PDF viewer will show you the result. Caveat, this is on a mac, if you are on Linux replace open with xdg-open.&lt;/p&gt;

&lt;h2 id=&#34;makefile&#34;&gt;Makefile&lt;/h2&gt;

&lt;p&gt;So to make the process even more seamless, I have a Makefile that matches on the basename and compiles it for you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%: %.md
  pandoc -V geometry=&#39;margin=1in&#39; -f markdown -o $*.pdf $*.md &amp;amp;&amp;amp; open $*.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now I just need to run &lt;code&gt;make sept_9&lt;/code&gt; and an updated PDF of that day opens up. I can extend it to support all the format pandoc supports but I&amp;rsquo;ll leave that until I absolutely must.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I learned to stop worrying and love Findbugs</title>
      <link>http://nextdoorhacker.com/2013/09/20/how-i-learned-to-stop-worrying-and-love-findbugs/</link>
      <pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2013/09/20/how-i-learned-to-stop-worrying-and-love-findbugs/</guid>
      <description>

&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; I know this is about a year late. I should do &lt;code&gt;git stash pop&lt;/code&gt; more often. Also, after tweaking Jekyll Bootstrap too much I&amp;rsquo;ve decided to give up and port to something sane like Ghost or Octopress.&lt;/p&gt;

&lt;h2 id=&#34;the-five-stages-of-grief&#34;&gt;The Five Stages of Grief&lt;/h2&gt;

&lt;p&gt;Here is a cycle I see repeating in programmers (including myself) whenever a static analyzer is introduced in build process too late in the game.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Denial:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before running anything &amp;ldquo;My code is awesome, the static analyzer will not catch anything for sure.&amp;rdquo; And after running &amp;ndash; it should be a minor fix to resolving any issues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Anger:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How could my code be so bad. I totally did skim all the best practices of &amp;ldquo;Java Concurrency Patterns&amp;rdquo; and &amp;ldquo;Effective Java&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bargaining:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You always lose in bargaining with a compiler. Just face it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Depression&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Damn, I should have picked a different profession&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Acceptance&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Okay, I will fix all these issues and automate the process&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;post-acceptance&#34;&gt;Post-Acceptance&lt;/h2&gt;

&lt;p&gt;Many times, I have had to turn off findbugs or add many exceptions to avoid introspecting into libraries I may not have control over. This leads to brittle software regardless of how awesome your coding and debugging skills are. I once had to include some WebSphereMQ libraries that were and are still dark-arts to me how they function. I had to ensure nothing in the namespace could ever be looked at. But the problem is &amp;ndash; now, a core component of your application is ignored by your safety checks. I think the only way to ensure performance and safety is to ensure across the organization that minimum safety checks are done for everything used. It is easier said than done in big slow moving enterprises. Here is my &lt;code&gt;findbugs-ignore.xml&lt;/code&gt; that I copy-paste in any new projects. See if you spot any issues.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;FindBugsFilter&amp;gt;
      &amp;lt;Match&amp;gt;
        &amp;lt;Class name=&amp;quot;~.*Test$&amp;quot;/&amp;gt;
      &amp;lt;/Match&amp;gt;
      &amp;lt;Match&amp;gt;
        &amp;lt;Package name=&amp;quot;~test\..*&amp;quot;/&amp;gt;
      &amp;lt;/Match&amp;gt;
      &amp;lt;Match&amp;gt;
        &amp;lt;Package name=&amp;quot;awesome.package&amp;quot;/&amp;gt;
      &amp;lt;/Match&amp;gt;
&amp;lt;/FindBugsFilter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I ignore tests, mostly because I give myself freedom to cheat in those. You should avoid obvious problems but if being able to abuse reflection in test makes your tests better understandable, go ahead and do it. The last match is a generated package that has history of its own. I ran into enough problems trying to get it close enough to get findbugs to pass properly that I have started to ignore them by default and add enough sane items in the code generation step to ensure rest of the system does not fall apart.&lt;/p&gt;

&lt;p&gt;On that Note. If you have to parse some XMLs and you are given some XSDs with questionable timestamps, this could be handy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                &amp;lt;plugin&amp;gt;
                    &amp;lt;groupId&amp;gt;org.jvnet.jaxb2.maven2&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;maven-jaxb2-plugin&amp;lt;/artifactId&amp;gt;
                    &amp;lt;version&amp;gt;0.8.3&amp;lt;/version&amp;gt;
                    &amp;lt;configuration&amp;gt;
                        &amp;lt;schemaDirectory&amp;gt;${basedir}/src/main/resources/schema&amp;lt;/schemaDirectory&amp;gt;
                        &amp;lt;bindingDirectory&amp;gt;${basedir}/src/main/resources/schema&amp;lt;/bindingDirectory&amp;gt;
                        &amp;lt;strict&amp;gt;false&amp;lt;/strict&amp;gt;
                        &amp;lt;extension&amp;gt;true&amp;lt;/extension&amp;gt;
                        &amp;lt;generatePackage&amp;gt;awesome.package&amp;lt;/generatePackage&amp;gt;
                        &amp;lt;plugins&amp;gt;
                            &amp;lt;plugin&amp;gt;
                                &amp;lt;groupId&amp;gt;org.jvnet.jaxb2_commons&amp;lt;/groupId&amp;gt;
                                &amp;lt;artifactId&amp;gt;jaxb2-basics&amp;lt;/artifactId&amp;gt;
                                &amp;lt;version&amp;gt;0.6.2&amp;lt;/version&amp;gt;
                            &amp;lt;/plugin&amp;gt;
                            &amp;lt;plugin&amp;gt;
                                &amp;lt;groupId&amp;gt;org.jvnet.jaxb2_commons&amp;lt;/groupId&amp;gt;
                                &amp;lt;artifactId&amp;gt;jaxb2-basics-annotate&amp;lt;/artifactId&amp;gt;
                                &amp;lt;version&amp;gt;0.6.2&amp;lt;/version&amp;gt;
                            &amp;lt;/plugin&amp;gt;
                        &amp;lt;/plugins&amp;gt;

                        &amp;lt;args&amp;gt;
                            &amp;lt;!-- JAXB/Jackson annotations to make xml/json serialization easier --&amp;gt;
                            &amp;lt;arg&amp;gt;-Xannotate&amp;lt;/arg&amp;gt;
                            &amp;lt;!-- For debugging --&amp;gt;
                            &amp;lt;arg&amp;gt;-XtoString&amp;lt;/arg&amp;gt;
                            &amp;lt;!-- Value based equality and hashcode methods --&amp;gt;
                            &amp;lt;arg&amp;gt;-Xequals&amp;lt;/arg&amp;gt;
                            &amp;lt;arg&amp;gt;-XhashCode&amp;lt;/arg&amp;gt;
                            &amp;lt;arg&amp;gt;-Xmergeable&amp;lt;/arg&amp;gt;
                            &amp;lt;arg&amp;gt;-Xcopyable&amp;lt;/arg&amp;gt;
                        &amp;lt;/args&amp;gt;
                    &amp;lt;/configuration&amp;gt;
                  &amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have gotten bitten by terrible ISO8601 standards, so anything timestamp, I convert them to JODA DateTime formats immediately via a &lt;code&gt;bindings.xjb&lt;/code&gt; file. This might be worth another post. I&amp;rsquo;m including the &lt;code&gt;bindings.xjb&lt;/code&gt; file here anyway for reference.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
      &amp;lt;jaxb:bindings xmlns:jaxb=&amp;quot;http://java.sun.com/xml/ns/jaxb&amp;quot;
                     xmlns:xs=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;
                     xmlns:xjc=&amp;quot;http://java.sun.com/xml/ns/jaxb/xjc&amp;quot;
                     xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
                     xmlns:annox=&amp;quot;http://annox.dev.java.net&amp;quot;
                     xsi:schemaLocation=&amp;quot;http://java.sun.com/xml/ns/jaxb http://java.sun.com/xml/ns/jaxb/bindingschema_2_0.xsd&amp;quot;
                     version=&amp;quot;2.1&amp;quot;&amp;gt;

          &amp;lt;jaxb:globalBindings&amp;gt;
              &amp;lt;!-- Use java.util.Calendar instead of javax.xml.datatype.XMLGregorianCalendar for xs:dateTime
                for obvious sanity-saving reasons --&amp;gt;
              &amp;lt;xjc:javaType  adapter=&amp;quot;awesome.package.beans.adapter.DateXmlAdapter&amp;quot; name=&amp;quot;org.joda.time.DateTime&amp;quot; xmlType=&amp;quot;xs:date&amp;quot; /&amp;gt;
              &amp;lt;xjc:javaType  adapter=&amp;quot;awesome.package.beans.adapter.DateXmlAdapter&amp;quot; name=&amp;quot;org.joda.time.DateTime&amp;quot; xmlType=&amp;quot;xs:dateTime&amp;quot; /&amp;gt;

              &amp;lt;!-- Force all classes implements Serializable --&amp;gt;
              &amp;lt;xjc:serializable uid=&amp;quot;1&amp;quot;/&amp;gt;
          &amp;lt;/jaxb:globalBindings&amp;gt;




      &amp;lt;/jaxb:bindings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, now that I have referenced a &amp;ldquo;Bean&amp;rdquo; I have to include that too.. Do not copy this.. this was very specific to what I was doing. I got a date source with no timestamp that I had reasonable guarantee that it would orginate from Eastern time. I hope you don&amp;rsquo;t have to do such hacks. But if you need to, this will be handy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      public class DateXmlAdapter extends XmlAdapter&amp;lt;String, DateTime&amp;gt; {

        public static final DateTimeFormatter NO_TIMEZONE_TIME_FORMAT = DateTimeFormat.forPattern(&amp;quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&amp;quot;).withZone(DateTimeZone.forID(&amp;quot;America/New_York&amp;quot;));

        private static final DateTimeFormatter CHECKING_FORMAT =
              ISODateTimeFormat.dateTime();

          @Override
          public DateTime unmarshal(String value) {

            return NO_TIMEZONE_TIME_FORMAT.parseDateTime(value);
          }

          @Override
          public String marshal(DateTime value) {
            return CHECKING_FORMAT.print(value);
          }

      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, back to findbugs.. Being able to use findbugs to keep sanity despite all thes pitfalls makes it an excellent tool. Additionally, I have found that any bad coding practices get caught immediately by the CI server anyway.&lt;/p&gt;

&lt;p&gt;Some notes a year later:&lt;/p&gt;

&lt;p&gt;1) I&amp;rsquo;m lazy with blogging and keep meaning to fix it&lt;/p&gt;

&lt;p&gt;2) Findbugs continues to pay off for Java projects. Partially because I tend to jump around languages not-infrequently for whatever reason. And when I dive back into it either after someone else has written some more code, findbugs ensures that the code is in reasonable shap.&lt;/p&gt;

&lt;p&gt;3) There&amp;rsquo;s no order to my thoughts there.. but I&amp;rsquo;m posting anyway. Feel free to complain.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Emacs 24.2 from source with Checkinstall on Ubuntu 13.04</title>
      <link>http://nextdoorhacker.com/2013/07/20/installing-emacs-from-source-with-checkinstall-on-ubuntu/</link>
      <pubDate>Sat, 20 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2013/07/20/installing-emacs-from-source-with-checkinstall-on-ubuntu/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Caveat&lt;/strong&gt; This isn&amp;rsquo;t very well written, I might revisit this at some point. These are really just my notes in installing emacs and some reasons why I&amp;rsquo;m going out of the vim world in response to some crazy issues I&amp;rsquo;m having.&lt;/p&gt;

&lt;p&gt;I recently decided that I should give Emacs another go. As you might know based on my posts that I really like vim. It&amp;rsquo;s just simple and easy to find everywhere. Great for sysadmins and programmers alike. What I&amp;rsquo;ve been finding is the same kind of bloat that I saw in Emacs years before. As I kept adding more languages and features to use Vim as more of an IDE (for clojure specifically), these warts became more apparently. For example, I was segfaulting my vim editor every once in a while while editing Clojure because something odd was happening with my syntax analyzing plugin and the vim buffer.
There are additional problems with Vim and Clojure that I found.. say, you absentmindedly wrote a code like this. I use the magnificent Vim Fireplace plugin to code in Clojure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(loop [i 0]
  (recur (inc i)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And sent it out to execution, there&amp;rsquo;s no way for you to get back control of the console again.. it&amp;rsquo;s going on an infinite loop with no turning back. Okay, I might have gotten spoiled by my Erlang &lt;code&gt;erl&lt;/code&gt; repl interface where I can Ctrl+G out of most of my woes, I believe that as Vim becomes ever closer to becoming an IDE for developers, it needs to incorporate ways to handle these kinds of use cases. I&amp;rsquo;m well aware of the warning in the &lt;a href=&#34;http://clojure-doc.org/articles/tutorials/vim_fireplace.html&#34;&gt;Fireplace documentation&lt;/a&gt; to not do what I just said, it&amp;rsquo;s a contrived example for sure but real code has unexpected behaviors when you&amp;rsquo;re checking how it works.&lt;/p&gt;

&lt;p&gt;That said, what I do like about vim are the movements. I&amp;rsquo;m planning to map the &lt;code&gt;hjkl&lt;/code&gt; movements back to emacs, everything else be damned. I have gone through the tutorial for emacs but somehow the Ctrl keybindings and stress on my pinky just makes me give up emacs. I also don&amp;rsquo;t quite like that emacs is modeless, I think that ends you up with a lot of &lt;code&gt;C-x&lt;/code&gt; and &lt;code&gt;M-x&lt;/code&gt; combinations that could&amp;rsquo;ve been avoided. I&amp;rsquo;ll be writing more on this as I explore how I adjust in this brave new world.&lt;/p&gt;

&lt;p&gt;Now that I&amp;rsquo;ve ranted and unnecessarily over-explained myself, here goes what I wanted to write in the first place. How you can install emacs from source and still get apt-get uninstall if you need to. You use the checkinstall package to do this. Emacs is just what I happened to be using and from my previous experiences working with emacs, I&amp;rsquo;ve found the best way to install emacs is to do it from source. Particularly important if you&amp;rsquo;re going to make it custom and want it to run on multiple platforms with realistic expectations. (Same idea holds with Vim too - especially if you want to support python interop for plugins like &lt;code&gt;Ctrl+P&lt;/code&gt;). This post is an attempt to keep track of what I&amp;rsquo;m doing with Emacs and adapting as a prolific vim user struggling to keep all the niceness vim has in the emacs land.&lt;/p&gt;

&lt;h2 id=&#34;getting-emacs-source&#34;&gt;Getting Emacs source&lt;/h2&gt;

&lt;p&gt;You can download emacs source using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget http://alpha.gnu.org/gnu/emacs/pretest/emacs-24.2.90.tar.gz
tar -xzvf emacs-24.2.90.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-the-packages&#34;&gt;Get the packages&lt;/h2&gt;

&lt;p&gt;So, if you&amp;rsquo;re a developer &amp;ndash; this might be unnecessary but do this anyway if you run into trouble in any future steps. I was doing this on a fresh-ish installation of Ubuntu 13.04 on my home desktop. I have included the &lt;code&gt;checkinstall&lt;/code&gt; package here already. I&amp;rsquo;ll explain further about checkinstall.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install texinfo build-essential automake autoconf libdbus-1-dev libgconf2-dev libgif-dev libgpm-dev libgtk2.0-dev libjpeg62-dev libm17n-dev libncurses5-dev libotf-dev librsvg2-dev libtiff5-dev libXpm-dev checkinstall.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install&#34;&gt;Install&lt;/h2&gt;

&lt;p&gt;This is definitely the easiest part, assuming things don&amp;rsquo;t break on you randomly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./configure
make bootstrap
make
# You could check if it runs by executing src/emacs
sudo checkinstall
# You will get a bunch of questions... pretty self explanatory
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;uninstalling&#34;&gt;Uninstalling&lt;/h2&gt;

&lt;p&gt;So, this is the whole reason for using Checkinstall to install emacs or other packages that you need to get from source for one reason or other. You can just do &lt;code&gt;dpkg -r emacs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you want to install your emacs side by side with another one, you might want to change  the name and give a different path in the &lt;code&gt;./configure&lt;/code&gt; step.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Perfect Vim Setup for Go</title>
      <link>http://nextdoorhacker.com/2013/07/05/perfect-vim-setup-for-go/</link>
      <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2013/07/05/perfect-vim-setup-for-go/</guid>
      <description>

&lt;p&gt;So, the more I use Go, more I like what I&amp;rsquo;m getting. It&amp;rsquo;s one of the very few languages that guides you to write better code right off the bat by making it easy and not pedantic. I have a big rant in my head about this but I&amp;rsquo;ll save you the pain.&lt;/p&gt;

&lt;p&gt;This was one thing my vim setup was missing. As my go programs became bigger, I kept thinking, I&amp;rsquo;d really like better autocomplete and, heck, even syntax highlighting. I&amp;rsquo;ll focus on two ways to do this for vim, one without using Pathogen, Vundle and one using Pathogen ( I don&amp;rsquo;t use Vundle but the idea is the same ).&lt;/p&gt;

&lt;h2 id=&#34;your-golang-setup&#34;&gt;Your Golang setup&lt;/h2&gt;

&lt;p&gt;I tend to install go from source (the build system is actually pretty fascinating, but I&amp;rsquo;ll save that for later). So, assuming your go binaries are stored in &lt;code&gt;/opt/golang&lt;/code&gt;, you want these settings in your &lt;code&gt;$HOME/.bashrc&lt;/code&gt; or similar files. My &lt;code&gt;$GOPATH&lt;/code&gt; is generally at &lt;code&gt;$HOME/.go&lt;/code&gt; keeping in convention with lots of other programming languages, tools I use.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export GOROOT=/opt/golang
export GOPATH=$HOME/.go
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;syntax-highlighting&#34;&gt;Syntax Highlighting&lt;/h2&gt;

&lt;h3 id=&#34;without-using-pathogen&#34;&gt;Without using Pathogen&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t use Pathogen or Vundle to manage your vim config, thankfully the official install from Google comes with vim config right out of the box. Head on over to &lt;code&gt;$GOROOT/misc/vim&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll see something like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autoload  ftdetect  ftplugin  indent  plugin  readme.txt  syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a vim setup, now just copy that to your &lt;code&gt;$HOME/.vim&lt;/code&gt; directory and you have filetype detection and syntax highlighting goodness.&lt;/p&gt;

&lt;h3 id=&#34;using-pathogen&#34;&gt;Using Pathogen&lt;/h3&gt;

&lt;p&gt;So, if you&amp;rsquo;re an experienced vim w/ pathogen user, you&amp;rsquo;d have figured out that you could totally dump that into a git repo and put in your bundle. You could do that or use someone else&amp;rsquo;s over at &lt;a href=&#34;https://github.com/jnwhiteh/vim-golang&#34;&gt;github.com/jnwhiteh/vim-golang&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone git@github.com:jnwhiteh/vim-golang.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you&amp;rsquo;re like me and use submodules&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/vim-config
git submodule add git@github.com:jnwhiteh/vim-golang.git vim/bundle/golang
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using Vundle is the same idea, except you add the git repository in your config file.&lt;/p&gt;

&lt;h2 id=&#34;omicomplete-support&#34;&gt;OmiComplete support&lt;/h2&gt;

&lt;p&gt;Remember in step 1 where we added the &lt;code&gt;$GOPATH/bin&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt; variable? This is where it will come handy. So, if you&amp;rsquo;ve ever run the &lt;code&gt;go get&lt;/code&gt; command to get packages, if the package delcares an executable, it will be placed in the bin directory. In our case, it&amp;rsquo;s an autocompletion daemon called &lt;a href=&#34;https://github.com/nsf/gocode&#34;&gt;gocode&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;without-pathogen&#34;&gt;Without Pathogen&lt;/h3&gt;

&lt;p&gt;Thankfully, similar to &lt;code&gt;golang&lt;/code&gt; itself, &lt;code&gt;gocode&lt;/code&gt; comes with vim files for support out of the box. So, you can just copy the contents from there&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u github.com/nsf/gocode
cp -r gocode/vim/* $HOME/.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The vim scripts just look for &lt;code&gt;gocode&lt;/code&gt; binary in the shell, you should be all set.&lt;/p&gt;

&lt;h3 id=&#34;with-pathogen&#34;&gt;With Pathogen&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a repo that&amp;rsquo;s amenable to using with pathogen at &lt;a href=&#34;http://github.com/Blackrush/vim-gocode&#34;&gt;github.com/Blackrush/vim-gocode&lt;/a&gt;. It&amp;rsquo;s the same process as the enabling syntax highlighting, just clone or get the repo as a submodule.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone git@github.com:Blackrush/vim-gocode.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/vim-config
git submodule add git@github.com:Blackrush/vim-gocode.git vim/bundle/gocode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, now you should have Omnicomplete support for it.. if you have SuperTab installed, it should be mapped to Tab key otherwise &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; would work for autocomplete goodness.&lt;/p&gt;

&lt;h2 id=&#34;other-plugins-to-look-at&#34;&gt;Other plugins to look at&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt; - does syntax detection and when combined with TagBar is pretty awesome&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/majutsushi/tagbar&#34;&gt;TagBar&lt;/a&gt; - a better way to represent &lt;code&gt;exuberant-ctags&lt;/code&gt; generated tags for your files, also supports &lt;code&gt;jsctags&lt;/code&gt; for javascript files .. or maybe it&amp;rsquo;s other way around&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/jstemmer/gotags&#34;&gt;Gotags&lt;/a&gt; - A ctags compatible tags generator for go.. it&amp;rsquo;s still rough on the edges.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;end-result&#34;&gt;End Result&lt;/h2&gt;

&lt;p&gt;So, here&amp;rsquo;s what my current vim setup looks like for Go. I&amp;rsquo;m experimenting with gotags right now. It&amp;rsquo;s not quite ready yet. It segfaulted vim once for me, so I&amp;rsquo;m somewhat reluctant to hype it up too much.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/vim-go-setup-screenshot.png&#34; alt=&#34;Go Screenshot&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want the exact setup like mine &amp;ndash; with Powerline, Syntastic, etc.. feel free to clone/fork my vim-config at &lt;a href=&#34;https://github.com/prasincs/vim-config&#34;&gt;https://github.com/prasincs/vim-config&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nicer Music Posts</title>
      <link>http://nextdoorhacker.com/2013/04/14/nicer-music-posts/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2013/04/14/nicer-music-posts/</guid>
      <description>&lt;p&gt;So, I found this awesome library called &lt;a href=&#34;http://vexflow.com/vextab/&#34;&gt;VexTab&lt;/a&gt; that allows you to write down musical notations in a simple syntax and generates a HTML5/javascript rendering of the notation.  I have some little snippets to allow rendering chords and tabs with/without notations. This will be specific to Jekyll generated sites on Github, you can be much cleverer on your server.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s almost too easy but here you go. How to include music notation in your blog &amp;ndash; you can ignore raphael.js and chart/chord.js files if you don&amp;rsquo;t want chord representations. Put these files in your html from vexflow/vextab projects.

&lt;script src=&#34;http://nextdoorhacker.com/js/raphael.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://nextdoorhacker.com/js/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://nextdoorhacker.com/js/underscore-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://nextdoorhacker.com/js/vexflow-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://nextdoorhacker.com/js/tabdiv-min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://nextdoorhacker.com/js/chord.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://nextdoorhacker.com/js/chart.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;http://nextdoorhacker.com/js/music-post.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;You can to get the &lt;code&gt;tabdiv-min.js&lt;/code&gt; file from vextab project after compiling. Or, you can browse to the &lt;code&gt;/assets/themes/js&lt;/code&gt; directory and copy all the files. Please respect the work of original author. Look at &lt;code&gt;music-post.js&lt;/code&gt; file to see how this is done.&lt;/p&gt;

&lt;p&gt;After that, you can render anything in the &lt;code&gt;VexTab&lt;/code&gt; format including the chords.&lt;/p&gt;

&lt;p&gt;So your code

&lt;div class=&#34;music music-vextab&#34;&gt;
tabstave notation=true tablature=false
notes Cn-D-E/4 F#/5
&lt;/div&gt;

&lt;/p&gt;

&lt;p&gt;will look like&lt;/p&gt;

&lt;div class=&#34;music music-vextab&#34;&gt;
tabstave notation=true tablature=false
notes Cn-D-E/4 F#/5
&lt;/div&gt;

&lt;p&gt;For more details on what the texts mean, please check the &lt;a href=&#34;http://vexflow.com/vextab/tutorial.html&#34;&gt;VexTab tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And, I adapted this from the &lt;a href=&#34;http://vexflow.com/vexchords/&#34;&gt;Vexchord Demo&lt;/a&gt;

&lt;div class=&#34;music music-chord&#34; data-key=&#34;E&#34; data-str=&#34;E&#34; data-shape=&#34;M E&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will look like
&lt;div class=&#34;music music-chord&#34; data-key=&#34;E&#34; data-str=&#34;E&#34; data-shape=&#34;M E&#34;&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Next step is to start blogging about music/theory along with nicer notations!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Organizing Research Papers</title>
      <link>http://nextdoorhacker.com/2013/01/31/organizing-research-papers/</link>
      <pubDate>Thu, 31 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2013/01/31/organizing-research-papers/</guid>
      <description>

&lt;p&gt;I keep finding myself asking this question way too often&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I definitely read that in a paper (or, blog post, quora article) a while back, where was it?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most often it&amp;rsquo;s either in one of my moleskine notebooks (seriously, those things are incredible - I keep two), date stamped with some scribble or on Evernote. I don&amp;rsquo;t get annotations and in-place notes. I like to scribble on the side a fair bit and annotate. While iAnnotate apps work, I can&amp;rsquo;t save that to Evernote yet, while keeping it editable. While I&amp;rsquo;m pretty sure Evernote or Dropbox can be adapted to do all of this with some cleverness or discipline, but here&amp;rsquo;s some of the research I did on how to organize your documents, research papers.&lt;/p&gt;

&lt;h2 id=&#34;what-i-want&#34;&gt;What I want&lt;/h2&gt;

&lt;p&gt;The ideal research note-taking application would let me do few things:&lt;/p&gt;

&lt;h3 id=&#34;keeping-track&#34;&gt;Keeping Track&lt;/h3&gt;

&lt;p&gt;Keep track of what I&amp;rsquo;m reading (goodreads attempts this for books, but I mean across devices).&lt;/p&gt;

&lt;h3 id=&#34;synced-annotations-and-notes&#34;&gt;Synced Annotations and Notes&lt;/h3&gt;

&lt;p&gt;Editable annotations and notes, I&amp;rsquo;d like to be able to read papers at the airport on my iPad, make notes in-place and when I reach my home, I can organize into a distilled document.&lt;/p&gt;

&lt;h3 id=&#34;tagging&#34;&gt;Tagging&lt;/h3&gt;

&lt;p&gt;I think I can do the two I mentioned earlier with kindle to some extent. What Kindle doesn&amp;rsquo;t give but Evernote does is tagging. I can organize things any way I want with tags.&lt;/p&gt;

&lt;h3 id=&#34;cross-platform&#34;&gt;Cross Platform&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;d like it to run on the iPad, Android, and the browser.. I don&amp;rsquo;t exactly care much about client applications, they&amp;rsquo;re nice to have in addition to these.&lt;/p&gt;

&lt;h3 id=&#34;bibliography-wherever-applicable-bibtex&#34;&gt;Bibliography wherever applicable (BibTeX)&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m lazy, and so are most people, I&amp;rsquo;d like to get BibTeX format documentation generated for me wherever it makes sense, if I got it off of some researcher or some site. It should let me add these if I just got the PDF and I want to keep track. The use case I&amp;rsquo;m thinking is, if I&amp;rsquo;m writing a new paper, I&amp;rsquo;d like to be able to tag with something, and just get a list of BibTeX annotations to paste for LaTeX to generate in whatever format I want.&lt;/p&gt;

&lt;h3 id=&#34;collaboration-sharing&#34;&gt;Collaboration, Sharing&lt;/h3&gt;

&lt;p&gt;I don&amp;rsquo;t research alone, unless it&amp;rsquo;s the time-honored tradition of searching for &lt;a href=&#34;http://www.youtube.com/watch?v=wf_IIbT8HGk&#34;&gt;cat videos&lt;/a&gt;, even that reddit probably has got to be the journal of sorts. Actually, on that note, I ran into &lt;a href=&#34;http://www.plosone.org/article/info:doi%2F10.1371%2Fjournal.pone.0046362&#34;&gt;this paper&lt;/a&gt; on how viewing cute images promotes a careful behavior and narrows attention focus. Believe it or not, I ran into it via &lt;a href=&#34;https://plus.google.com/105332691637769400620/posts/V77u6LeFAYy&#34;&gt;Sanjay Ghemawat&amp;rsquo;s G+ post&lt;/a&gt;. There you go, with enough cute pics, you might come up with BigTable.&lt;/p&gt;

&lt;p&gt;Back to the topic, I&amp;rsquo;d like to share with other people what I&amp;rsquo;m reading and ideally maintain a &amp;ldquo;burn list&amp;rdquo; of sorts with colleagues on what papers I&amp;rsquo;m reading for a particular project. There&amp;rsquo;s some &amp;ldquo;discovery&amp;rdquo; part here that you get for cheap but I can barely get around to reading what I plan on reading.&lt;/p&gt;

&lt;h3 id=&#34;importing-other-sources&#34;&gt;Importing other sources&lt;/h3&gt;

&lt;p&gt;PDFs, web pages, not just research articles&lt;/p&gt;

&lt;h2 id=&#34;possible-tools-that-get-it&#34;&gt;Possible tools that &amp;ldquo;get it&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;So far I think Mendeley comes the closest to this grand vision (it didn&amp;rsquo;t do tracking last time I used it but matters less than others), but there are others, this is by no means comprehensive.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.mendeley.com/features/&#34;&gt;Mendeley&lt;/a&gt; &amp;ndash; good tool, I used it extensively for some research at school, beginning to use it again.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.mekentosj.com/papers/&#34;&gt;Papers&lt;/a&gt; &amp;ndash; I know some people who swear by it, I think it lacks on some of the other features like collaboration, being cross-platform but it does a damn good job of organizing&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://evernote.com&#34;&gt;Evernote&lt;/a&gt; &amp;ndash; Not all the things I find interesting are research papers, evernote lets me &amp;ldquo;clip&amp;rdquo; online articles, I can scan paper docs and have it OCR so I can research it in future.. all that good stuff. I use it a lot for keeping notes anyway.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://zotero.com&#34;&gt;Zotero&lt;/a&gt; &amp;ndash; I know people who like it, didn&amp;rsquo;t find it too appealing myself&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.docear.org/&#34;&gt;Docear&lt;/a&gt; &amp;ndash; same thing as Papers, really good at organzing, I haven&amp;rsquo;t used it but I&amp;rsquo;ve seen it mentioned&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to suggest new ones in the comments, I&amp;rsquo;m not trying to be extensive. I think &lt;a href=&#34;http://www.quora.com&#34;&gt;Quora&lt;/a&gt; and &lt;a href=&#34;http://www.stackexchange.com&#34;&gt;StackExchange&lt;/a&gt; do that fairly well. :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wi Fi Diagnostics, monitoring tool in OSX</title>
      <link>http://nextdoorhacker.com/2013/01/05/wi-fi-diagnostics-monitoring-tool-in-osx/</link>
      <pubDate>Sat, 05 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2013/01/05/wi-fi-diagnostics-monitoring-tool-in-osx/</guid>
      <description>&lt;p&gt;I recently found this hidden/undocumented tool (at least not in Network Preferences) in OSX while trying to debug some wireless connectivity issues at the house. Most modern Linux distributions already come with a few of these tools to do monitoring, watching when the network drops, or just monitoring signal vs noise ratio. I wont go into the detail of how to do that with Linux (perhaps another blog topic). If you want to checkout the Linux side, you might want to start  &lt;a href=&#34;http://www.techrepublic.com/blog/networking/nuts-about-nets-wi-fi-diagnostic-tools-with-a-difference/2759&#34;&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;So, where is this tool and what can you do with it? The app is named  as-you-might-expect &lt;code&gt;Wi-Fi Diagnostics&lt;/code&gt; and you can find it at &lt;code&gt;/System/Library/CoreServices/Wi-Fi\ Diagnostics.app/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open your favorite terminal application. Mine is &lt;a href=&#34;http://www.iterm2.com/#/section/home&#34;&gt;iTerm2&lt;/a&gt; and type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/System/Library/CoreServices/Wi-Fi\ Diagnostics.app/Contents/MacOS/Wi-Fi\ Diagnostics
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll be greeted by this screen&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/osx-wifi-diagnostic-screen-1.png&#34; alt=&#34;Screen 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So far, I&amp;rsquo;ve only tried using the &lt;code&gt;Monitor Performance&lt;/code&gt; &amp;ndash; I tried others but lost interest&amp;hellip; it&amp;rsquo;s good to know that it&amp;rsquo;s possible to easily record events and turn on debug logs though. Here&amp;rsquo;s what my screen looks like, in the beginning&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nextdoorhacker.com/assets/images/osx-wifi-diagnostic-screen-2.png&#34; alt=&#34;Screen 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;However, the cool thing about &lt;code&gt;Monitor Performance&lt;/code&gt; option is that at the end of the session, it saves a tar.gz file in your desktop.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s named something like &lt;code&gt;/Users/&amp;lt;username&amp;gt;/Desktop/Wi-Fi Diagnostics Data-20130105-1825.tgz&lt;/code&gt;. Lets look inside.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a plist file named &lt;code&gt;com.apple.wifi.diagnostics.plist&lt;/code&gt; in the archive&amp;hellip; you can easily parse that using &lt;a href=&#34;http://docs.python.org/2.7/library/plistlib.html&#34;&gt;plistlib&lt;/a&gt;, I&amp;rsquo;d make a graph but my wifi is too stable. :(&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Moving on to Jekyll Bootstrap</title>
      <link>http://nextdoorhacker.com/2012/12/10/moving-on-to-jekyll-bootstrap/</link>
      <pubDate>Mon, 10 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2012/12/10/moving-on-to-jekyll-bootstrap/</guid>
      <description>&lt;p&gt;So, I finally decided to port this site to Jekyll-Bootstrap along with a bunch of other projects. There are some helper functions in Jekyll Bootstrap that I find very convenient to use. Particularly since I&amp;rsquo;m using ruby/rake all the time, it&amp;rsquo;s easier to just run the &lt;code&gt;rake post&lt;/code&gt; command to just post whatever you need to. I&amp;rsquo;ll add a few more things in the future. Right now, I&amp;rsquo;m just testing a bunch of things and didn&amp;rsquo;t exactly pay much attention to making the site look good.&lt;/p&gt;

&lt;p&gt;Not exactly sure why this wasn&amp;rsquo;t done before but I added something minor to the jekyll bootstrap &lt;code&gt;Rakefile&lt;/code&gt; - creating posts with categories from the commandline itself. Basically, &lt;code&gt;rake post title=&amp;quot;My Title&amp;quot; category=blag tags=jekyll,bootstrap&lt;/code&gt;. Feel free to pull the &lt;a href=&#34;http://github.com/prasincs/prasincs.github.com&#34;&gt;source&lt;/a&gt; and use it in your Jekyll-Bootstrap site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Abusing Git pre-commit hooks for fun and profit</title>
      <link>http://nextdoorhacker.com/2012/01/19/abusing_git_pre-commit_hooks_for_fun_and_profit/</link>
      <pubDate>Thu, 19 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://nextdoorhacker.com/2012/01/19/abusing_git_pre-commit_hooks_for_fun_and_profit/</guid>
      <description>&lt;p&gt;So, &lt;a href=&#34;http://book.git-scm.com/5_git_hooks.html&#34;&gt;git pre-commit hooks&lt;/a&gt; are executable files (yes, you have to declare them as &lt;code&gt;chmod +x&lt;/code&gt; - for some reason I forget this every time I write hooks) that are run right before you commit. This type of stuff lets you verify that your application is working, run a few tests, etc before it gets committed. At least the current use case I have (that probably illustrates the point of this particular hook fairly well) is related to this website. So, as I started working on this, I realized that categories are implmented as user plugins which aren&amp;rsquo;t allowed by github-pages for security reasons. Since all I&amp;rsquo;m doing is generating a static website, that doesn&amp;rsquo;t really matter as long as I copy the categories directory to the root, right? Why not automate that shit?&lt;/p&gt;

&lt;p&gt;First I wrote a script &amp;ldquo;./run_extensions&amp;rdquo; with&lt;/p&gt;


#!/bin/bash
rvm use 1.9.2
bundle install
bundle exec ejekyll
cp -rf _site/categories .
git add .


&lt;p&gt;not too surprising - I initialize rvm environment (I have that set in both bash and zsh shells that I use but it&amp;rsquo;s better to be explicit), &lt;code&gt;bundle install&lt;/code&gt; and &lt;code&gt;bundle exec ejekyll&lt;/code&gt; commands install the dependencies declared in the &lt;code&gt;Gemfile&lt;/code&gt; and then run the static website generation using Jekyll. Now that I have plugins goodness, I can copy the categories folder from &lt;code&gt;_site&lt;/code&gt; and make sure everything is staged.&lt;/p&gt;

&lt;p&gt;Now the next step would be to make the pre-commit hook itself. So, the pre-commit hook runs from the parent directory of .git folder itself and can be anything. I have a bash script. The location is .git/hooks/pre-commit&lt;/p&gt;


#!/bin/bash
./run_extensions.sh


&lt;p&gt;after this, make sure to run &lt;code&gt;chmod +x .git/hooks/pre-commit&lt;/code&gt; so that it&amp;rsquo;s executable. From now all, each commit is going to generate all the necessary categories structure.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>